package GUI;

import CommonInterface.ISearchState;
import CommonInterface.ISolver;
import Graph.EdgeWithCost;
import Graph.Graph;
import Graph.Vertex;
import Util.Helper;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.view.ViewerPipe;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.stream.IntStream;

/**
 * Created by e on 7/08/17.
 */
public class SwingMain implements Runnable {
    private ViewPanel viewPanel1;
    private JPanel panel1;
    private JButton startButton;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:grow", "center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        CellConstraints cc = new CellConstraints();
        panel1.add(viewPanel1, cc.xy(1, 1));
        startButton = new JButton();
        startButton.setText("Start");
        panel1.add(startButton, cc.xy(1, 5));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private class SolverWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            solver.doSolve();
            return null;
        }
    }

    public SwingMain() {
        $$$setupUI$$$();
        startButton.addActionListener(actionEvent -> {
            Timer timer = new Timer(1, (ActionListener) actionEvent1 -> updateVisualGraph(solver.pollState()));
            timer.start();
            new SolverWorker().run();
        });
    }

    public void createUIComponents() {
        this.viewPanel1 = viewPanel;
        viewPanel1.setPreferredSize(new Dimension(800, 800));
    }

    private static ISolver solver;
    private static org.graphstream.graph.Graph visualGraph = null;
    private static Viewer viewer = null;
    private static ViewPanel viewPanel = null;
    private static ViewerPipe viewerPipe = null;
    private static JFrame rootFrame;

    public static final String STYLE_RESORUCE = "url('style.css')";

    public static void init(org.graphstream.graph.Graph graph, ISolver solveri) {
        visualGraph = graph;
        solver = solveri;
        initRest();
    }

    public static void init(Graph<? extends Vertex, ? extends EdgeWithCost> graph, ISolver solveri) {
        visualGraph = Helper.convertToGsGraph(graph);
        solver = solveri;
        initRest();
    }

    private static void initRest() {
        System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
        viewer = new Viewer(visualGraph, Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
        viewer.enableAutoLayout();
        viewerPipe = viewer.newViewerPipe();
        viewPanel = viewer.addDefaultView(false);
        visualGraph.addAttribute("ui.stylesheet", STYLE_RESORUCE);
        rootFrame = new JFrame();
    }

    public static void updateVisualGraph(ISearchState searchState) {
        int[] processors = searchState.getProcessors();
        int[] startTimes = searchState.getStartTimes();
        IntStream.of(0, visualGraph.getNodeSet().size() - 1).forEach(i -> {
        });
        visualGraph.getNodeSet().forEach(n -> {
            int index = n.getIndex();
            if (processors[index] != -1) {
                n.addAttribute("ui.class", "sched");
                n.addAttribute("processor", processors[index] + 1);
                n.addAttribute("startTime", startTimes[index]);
            }
        });
    }

    @Override
    public void run() {
        rootFrame.setContentPane(panel1);
        rootFrame.pack();
        rootFrame.show();
    }

}
